-> Classes armazenam memrbros, que podem ser características (atributos) ou ações (métodos)

Classes possuuem em sua declaração: nome e vilibilidade

Para criar uma classe basta declarar a visibilidade + digitar a palavra reservada class + NomeDaClasse + abrir e fechar chaves { }.


Classe pública com nome "Caes" com atributos (nome, peso, corOlhos) e metodos [falar(), andar(), dormir()]
public class Caes {

    public String nome;
    public int peso;
    public String corOlhos;
    public int quantPatas;

    public void falar(){
        //MÉTODO FALAR
    }

    public void andar(){
        //MÉTODO ANDAR
    }

    public void comer(){
        //MÉTODO COMER
    }

    public void dormir(){
        //MÉTODO DORMIR
    }
}

-> Objetos são instancias (níveis de coisas, representação concreta de algo, concretização da classe[molde]) criados a partir das classes, que armazenam os métodos e atributos a eles atribuidos.
Por exemplo, podemos ter um objeto chamado CIVIC_2009 criado a partir da classe Carro, que guarda os atributos: modelo, cor e ano e tem as funções acelerar() e freiar().

-> Aprofundado mais nos atributos, eles são characterístacas/propriedades do objeto em si. A classe define quais atributos um objeto criado com base nela pode/deve armazenar. Podem ser públicos ou privados, que nesse caso, precisariam de métodos getters e setters para serem alterados
Os atributos são semelhantes à variáveis, mas dentro das classes

Tomando como exemplo uma classe cachorro, analise o código abaixo:

public class Cachorro{

        public String nome;
        public int peso;
        public String corOlhos;
        public int quantPatas;
    }

^ é criada a classe cachorro, e com ela podem ser definidos objetos com esses atributos

public class TestaCaes {

    public static void main(String[] args) {
        Cachorro cachorro1 = new Cachorro();
        cachorro1.nome = "Pluto";
        cachorro1.corOlhos = "azuis";
        cachorro1.peso = 53;
        cachorro1.quantPatas = 4;

        Cachorro cachorro2 = new Cachorro();
        cachorro2.nome = "Rex";
        cachorro2.corOlhos = "amarelo";
        cachorro2.peso = 22;
        cachorro2.quantPatas = 3;

        Cachorro cachorro3 = new Cachorro();
        cachorro3.nome = "Bob";
        cachorro3.corOlhos = "marrom";
        cachorro3.peso = 13;
        cachorro3.quantPatas = 4;

    }

}

^ agora na classe que possui o método main, definimos objetos do tipo "Cachorro" e definimos seus atributos

-> Os métodos são como funções específicas existentes em cada classe, você pode "rodar" um método em um objeto. Eles executam ações quando são chamados e podem receber parâmetros entre ().
Deve ser noemado com letra minúscula na primeira palavra e maiúscula nas demais (se houver)
ligarCarro // comerLanche

chamasse uim método com = objeto.metodo(atributos);

class Cachorro{
    int tamanho;
    String nome;


    void latir(){
        if(tamanho > 60)
            System.out.println("Wooof, Wooof!");
        else if(tamanho > 14)
            System.out.println("Ruff!, Ruff!");
        else
            System.out.println("Yip!, Yip!");
    }
}

^ com exemplo do cachorro, o método "latir" 'emite' um som diferente dependendo do tamanho do cachorro, quando for chamado.

-> Um constutor é um método padrão que é chamado assim que você usa a palavra reservada 'new', ele é usado para iniciar um objeto
o construtor não precisa ser definido manualmente, pois já e padrão, mas caso queira, pode.
o contrutor deve ter exatamente o mesmo nome da classe

Exemplo:
class Carro {
    String modelo;
    String cor;
    int ano;

    // Construtor padrão (não precisa ser escrito, mas pode ser definido manualmente)
    Carro() {
        System.out.println("Um novo carro foi criado!");
    }
    // Nesse caso, ele foi definido para que seja exibida uma mensagem quando o construtor for chamado
}
public class Main {
    public static void main(String[] args) {
        Carro meuCarro = new Carro(); // Chama o construtor
        // o método contrutor é o "Carro()"
    }
}

Também pode existir um construtor que recebe parâmetros de entrada na hora de criar um objeto:

class Carro {
    String modelo;
    String cor;
    int ano;

    // Construtor padrão (não precisa ser definido manualmente)
    Carro() {
        this.modelo = "Desconhecido";
        this.cor = "Sem cor";
        this.ano = 0;
    }

    // Construtor com parâmetros, quando você chamar o construtor, mas passar parâmetros, esse vai ser chamado ao invés do construtor padrão
    Carro(String modelo, String cor, int ano) {
        this.modelo = modelo;
        this.cor = cor;
        this.ano = ano;
    }
}
public class Main {
    public static void main(String[] args) {
        Carro carro1 = new Carro(); // Usa o construtor padrão
        Carro carro2 = new Carro("Fusca", "Azul", 1976); // Usa o construtor com parâmetros

        System.out.println("Carro 1: " + carro1.modelo + ", " + carro1.cor + ", " + carro1.ano);
        System.out.println("Carro 2: " + carro2.modelo + ", " + carro2.cor + ", " + carro2.ano);

        //Saída esperada:
        //Carro 1: Desconhecido, Sem cor, 0 (elementos padrões da classe, já q não foram passados parâmetros)
        //Carro 2: Fusca, Azul, 1976 (parâmetros passados)

    }
}
